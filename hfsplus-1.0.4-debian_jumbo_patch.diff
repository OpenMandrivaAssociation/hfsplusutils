diff -Naur hfsplus-1.0.4/libhfsp/src/apple.h hfsplus-1.0.4.oden/libhfsp/src/apple.h
--- hfsplus-1.0.4/libhfsp/src/apple.h	2002-03-10 21:58:09.000000000 +0100
+++ hfsplus-1.0.4.oden/libhfsp/src/apple.h	2007-03-16 18:46:20.000000000 +0100
@@ -27,16 +27,17 @@
 
 #define APPLE_H
 
-typedef signed char	    Char;
-typedef unsigned char	    UChar;
-typedef signed char	    SInt8;
-typedef unsigned char	    UInt8;
-typedef signed short	    SInt16;
-typedef unsigned short	    UInt16;
-typedef signed long	    SInt32;
-typedef unsigned long	    UInt32;
-typedef unsigned long	    OSType;
-typedef unsigned long long  UInt64;
+#include <asm/types.h>
+typedef __s8    Char;
+typedef __u8    UChar;
+typedef __s8    SInt8;
+typedef __u8    UInt8;
+typedef __s16   SInt16;
+typedef __u16   UInt16;
+typedef __s32   SInt32;
+typedef __u32   UInt32;
+typedef __u32   OSType;
+typedef __u64   UInt64;
 
 #define PARTITION_SIG	    0x504d   /* 'PM' */
 
diff -Naur hfsplus-1.0.4/libhfsp/src/btree.c hfsplus-1.0.4.oden/libhfsp/src/btree.c
--- hfsplus-1.0.4/libhfsp/src/btree.c	2002-03-05 20:50:28.000000000 +0100
+++ hfsplus-1.0.4.oden/libhfsp/src/btree.c	2007-03-16 18:46:20.000000000 +0100
@@ -95,8 +95,9 @@
     head->btree_type    = bswabU8_inc(p);
     head->reserved2	= bswabU8_inc(p);
     head->attributes    = bswabU32_inc(p);
-    for (i=0; i < 16; i++)
+    for (i=0; i < 16; i++) {
 	head->reserved3[i] = bswabU32_inc(p);
+    }
     return p;
 }
 
@@ -121,8 +122,9 @@
     bstoreU8_inc (p, head->btree_type);
     bstoreU8_inc (p, head->reserved2);
     bstoreU32_inc(p, head->attributes);
-    for (i=0; i < 16; i++)
+    for (i=0; i < 16; i++) {
 	bstoreU32_inc(p, head->reserved3[i]);
+    }
     return p;
 }
 
@@ -393,7 +395,7 @@
 	{
 	    p = volume_readfromfork(vol, nodebuf, fork, 0, bt->blkpernode,
 		 HFSP_EXTENT_DATA, bt->cnid);
-	    ((char*) p) += HEADER_RESERVEDOFFSET; // skip header
+	    p = ((char*) p) + HEADER_RESERVEDOFFSET; // skip header
 	}
 	
 	bt->alloc_bits = malloc(alloc_size);
diff -Naur hfsplus-1.0.4/libhfsp/src/btreecheck.c hfsplus-1.0.4.oden/libhfsp/src/btreecheck.c
--- hfsplus-1.0.4/libhfsp/src/btreecheck.c	2002-03-05 20:50:29.000000000 +0100
+++ hfsplus-1.0.4.oden/libhfsp/src/btreecheck.c	2007-03-16 18:46:20.000000000 +0100
@@ -264,7 +264,7 @@
 	{
 	    p = volume_readfromfork(vol, nodebuf, fork, 0, bt->blkpernode,
 		 HFSP_EXTENT_DATA, bt->cnid);
-	    ((char*) p) += HEADER_RESERVEDOFFSET; // skip header
+	    p = ((char*) p) + HEADER_RESERVEDOFFSET; // skip header
 	}
 	
 	bt->alloc_bits = malloc(alloc_size);
diff -Naur hfsplus-1.0.4/libhfsp/src/fscheck.c hfsplus-1.0.4.oden/libhfsp/src/fscheck.c
--- hfsplus-1.0.4/libhfsp/src/fscheck.c	2002-03-25 16:48:37.000000000 +0100
+++ hfsplus-1.0.4.oden/libhfsp/src/fscheck.c	2007-03-16 18:46:20.000000000 +0100
@@ -204,7 +204,8 @@
  */
 static int fscheck_volume_readbuf(volume * vol, hfsp_vh* vh, void* p)
 {
-    if ( (vh->signature	= bswabU16_inc(p)) != HFSP_VOLHEAD_SIG) 
+    vh->signature	= bswabU16_inc(p);
+    if (vh->signature != HFSP_VOLHEAD_SIG) 
     {
 	printf("Unexpected Volume signature '%2s' expected 'H+'\n",
 		(char*) &vh->signature);
@@ -230,7 +231,7 @@
     vh->write_count	= bswabU32_inc(p);
     vh->encodings_bmp	= bswabU64_inc(p);
     memcpy(vh->finder_info, p, 32); 
-    ((char*) p) += 32; // So finderinfo must be swapped later, ***
+    p = ((char*) p) + 32; // So finderinfo must be swapped later, ***
     p = volume_readfork(p, &vh->alloc_file );
     p = volume_readfork(p, &vh->ext_file   );
     p = volume_readfork(p, &vh->cat_file   );
@@ -277,12 +278,12 @@
 	    printf("Volume is wrapped in HFS volume "
 		   " (use hfsck to check this)\n");
 
-	((char*) p) += 0x12;		/* skip unneded HFS vol fields */
+	p = ((char*) p) + 0x12;		/* skip unneded HFS vol fields */
 	drAlBlkSiz = bswabU32_inc(p);	/* offset 0x14 */
-	((char*) p) += 0x4;		/* skip unneded HFS vol fields */
+	p = ((char*) p) + 0x4;		/* skip unneded HFS vol fields */
 	drAlBlSt    = bswabU16_inc(p);	/* offset 0x1C */
 	
-	((char*) p) += 0x5E;		/* skip unneded HFS vol fields */
+	p = ((char*) p) + 0x5E;		/* skip unneded HFS vol fields */
 	signature = bswabU16_inc(p);	/* offset 0x7C, drEmbedSigWord */
 	if (signature != HFSP_VOLHEAD_SIG)
 	    HFSP_ERROR(-1, "This looks like a normal HFS volume");
diff -Naur hfsplus-1.0.4/libhfsp/src/libhfsp.h hfsplus-1.0.4.oden/libhfsp/src/libhfsp.h
--- hfsplus-1.0.4/libhfsp/src/libhfsp.h	2002-03-25 16:48:37.000000000 +0100
+++ hfsplus-1.0.4.oden/libhfsp/src/libhfsp.h	2007-03-16 18:46:20.000000000 +0100
@@ -31,7 +31,7 @@
 # include "hfs.h"
 # include "hfsp.h"
 
-extern int errno;
+#include <errno.h>
 /* Last error is eventually found here */
 extern const char *hfsp_error; 
 
diff -Naur hfsplus-1.0.4/libhfsp/src/record.c hfsplus-1.0.4.oden/libhfsp/src/record.c
--- hfsplus-1.0.4/libhfsp/src/record.c	2002-03-17 18:20:01.000000000 +0100
+++ hfsplus-1.0.4.oden/libhfsp/src/record.c	2007-03-16 18:46:20.000000000 +0100
@@ -60,8 +60,9 @@
     key->parent_cnid		    = bswabU32_inc(p);
     key->name.strlen = len	    = bswabU16_inc(p);
     cp = key->name.name;
-    for (i=0; i < len; i++, cp++)
+    for (i=0; i < len; i++, cp++) {
 	*cp			    = bswabU16_inc(p);
+    }
 	/* check if keylenght was correct */
     if (key_length != ((char*) p) - ((char*) check))
 	 HFSP_ERROR(EINVAL, "Invalid key length in record_readkey");
@@ -93,8 +94,9 @@
     bstoreU16_inc(p, key_length);
     bstoreU32_inc(p, key->parent_cnid);
     bstoreU16_inc(p, len);
-    for (i=0; i < len; i++, cp++)
+    for (i=0; i < len; i++, cp++) {
 	bstoreU16_inc(p, *cp);
+    }
     return p;	
   fail:
     return NULL;
@@ -477,8 +479,9 @@
     cp = entry->nodeName.name;
     if (len > 255)
 	HFSP_ERROR(-1, "Invalid key length in record_thread");
-    for (i=0; i < len; i++, cp++)
+    for (i=0; i < len; i++, cp++) {
 	*cp			 = bswabU16_inc(p);
+    }
     return p;
   fail:
     return NULL;
@@ -497,8 +500,9 @@
     cp = entry->nodeName.name;
     if (len > 255)
 	HFSP_ERROR(-1, "Invalid key length in record_thread");
-    for (i=0; i < len; i++, cp++)
+    for (i=0; i < len; i++, cp++) {
 	bstoreU16_inc(p, *cp);
+    }
     return p;
   fail:
     return NULL;
diff -Naur hfsplus-1.0.4/libhfsp/src/swab.h hfsplus-1.0.4.oden/libhfsp/src/swab.h
--- hfsplus-1.0.4/libhfsp/src/swab.h	2002-03-05 20:50:29.000000000 +0100
+++ hfsplus-1.0.4.oden/libhfsp/src/swab.h	2007-03-16 18:46:20.000000000 +0100
@@ -36,28 +36,45 @@
 
 #define bswabU16(val) bswap_16(val)
 
-#define bswabU16_inc(ptr) bswap_16(*((UInt16*) (ptr))++)
-#define bswabU32_inc(ptr) bswap_32(*((UInt32*) (ptr))++)
-#define bswabU64_inc(ptr) bswap_64(*((UInt64*) (ptr))++)
-
-#define bstoreU16_inc(ptr, val) (*((UInt16*) (ptr))++) = bswap_16(val)
-#define bstoreU32_inc(ptr, val) (*((UInt32*) (ptr))++) = bswap_32(val)
-#define bstoreU64_inc(ptr, val) (*((UInt64*) (ptr))++) = bswap_64(val)
+#define bswabU16_inc(ptr) bswap_16(*((UInt16*) (ptr))); ptr = (UInt16*)ptr + 1
+#define bswabU32_inc(ptr) bswap_32(*((UInt32*) (ptr))); ptr = (UInt32*)ptr + 1
+#define bswabU64_inc(ptr) bswap_64(*((UInt64*) (ptr))); ptr = (UInt64*)ptr + 1
+
+#define bstoreU16_inc(ptr, val) *((UInt16*) (ptr)) = bswap_16(val); ptr = (UInt16*)ptr + 1
+#define bstoreU32_inc(ptr, val) *((UInt32*) (ptr)) = bswap_32(val); ptr = (UInt32*)ptr + 1;
+#define bstoreU64_inc(ptr, val) *((UInt64*) (ptr)) = bswap_64(val); ptr = (UInt32*)ptr + 1;
 
 #else // BYTE_ORDER == BIG_ENDIAN
 
 #define bswabU16(val) val
 
-#define bswabU16_inc(ptr) (*((UInt16*) (ptr))++)
-#define bswabU32_inc(ptr) (*((UInt32*) (ptr))++)
-#define bswabU64_inc(ptr) (*((UInt64*) (ptr))++)
-
-#define bstoreU16_inc(ptr, val) (*((UInt16*) (ptr))++) = val
-#define bstoreU32_inc(ptr, val) (*((UInt32*) (ptr))++) = val
-#define bstoreU64_inc(ptr, val) (*((UInt64*) (ptr))++) = val
+#define bswabU16_inc(ptr) *((UInt16*) (ptr)); ptr = (UInt16*)ptr + 1
+/* Only available as a GCC extension, but required on sparc due to
+   alignment issues in some of the on-disk structs */
+#if defined(__GNUC__) && defined(__sparc__)
+#define bswabU32_inc(ptr) ({			\
+	unsigned char *c = (char*)ptr;		\
+	ptr = ((UInt32 *)ptr) + 1;		\
+	((c[0] << 24)+(c[1] << 16)+(c[2] << 8)+c[3]);})
+#define bswabU64_inc(ptr) ({			\
+	unsigned char *c = (char*)ptr;		\
+	UInt64 val = 0;				\
+	int i = 0;				\
+	ptr = ((UInt64 *)ptr) + 1;		\
+	while (i < 8)				\
+		val += (c[i] << (8*(7-i++)));	\
+	val;})
+#else
+#define bswabU32_inc(ptr) *((UInt32*) (ptr)); ptr = (UInt32*)ptr + 1
+#define bswabU64_inc(ptr) *((UInt64*) (ptr)); ptr = (UInt64*)ptr + 1
+#endif
+
+#define bstoreU16_inc(ptr, val) *((UInt16*) (ptr)) = val; ptr = (UInt16*)ptr + 1
+#define bstoreU32_inc(ptr, val) *((UInt32*) (ptr)) = val; ptr = (UInt32*)ptr + 1
+#define bstoreU64_inc(ptr, val) *((UInt64*) (ptr)) = val; ptr = (UInt64*)ptr + 1
 
 #endif
 
 /* for the sake of compleetness and readability */
-#define bswabU8_inc(ptr)	(*((UInt8*) (ptr))++)
-#define bstoreU8_inc(ptr,val)	(*((UInt8*) (ptr))++) = val
+#define bswabU8_inc(ptr)	*((UInt8*) (ptr)); ptr = (UInt8*)ptr + 1
+#define bstoreU8_inc(ptr,val)	*((UInt8*) (ptr)) = val; ptr = (UInt8*)ptr + 1
diff -Naur hfsplus-1.0.4/libhfsp/src/unicode.c hfsplus-1.0.4.oden/libhfsp/src/unicode.c
--- hfsplus-1.0.4/libhfsp/src/unicode.c	2002-03-05 20:50:29.000000000 +0100
+++ hfsplus-1.0.4.oden/libhfsp/src/unicode.c	2007-03-16 18:46:20.000000000 +0100
@@ -16,7 +16,6 @@
 #include <stdlib.h>
 #include <endian.h>
 #include <byteswap.h>
-#include <linux/string.h>
 
 #define __USE_GNU
     /* need wcsrtomb */
diff -Naur hfsplus-1.0.4/libhfsp/src/volume.c hfsplus-1.0.4.oden/libhfsp/src/volume.c
--- hfsplus-1.0.4/libhfsp/src/volume.c	2002-03-26 19:00:29.000000000 +0100
+++ hfsplus-1.0.4.oden/libhfsp/src/volume.c	2007-03-16 18:46:20.000000000 +0100
@@ -323,7 +323,8 @@
  */
 static int volume_readbuf(hfsp_vh* vh, void* p)
 {
-    if ( (vh->signature	= bswabU16_inc(p)) != HFSP_VOLHEAD_SIG) 
+    vh->signature	= bswabU16_inc(p);
+    if (vh->signature != HFSP_VOLHEAD_SIG) 
 	HFSP_ERROR(-1, "This is not a HFS+ volume");
     vh->version	    	= bswabU16_inc(p);
     vh->attributes   	= bswabU32_inc(p); 
@@ -345,7 +346,7 @@
     vh->write_count	= bswabU32_inc(p);
     vh->encodings_bmp	= bswabU64_inc(p);
     memcpy(vh->finder_info, p, 32); 
-    ((char*) p) += 32; // finderinfo is not used by now
+    p = ((char*) p) + 32; // finderinfo is not used by now
     p = volume_readfork(p, &vh->alloc_file );
     p = volume_readfork(p, &vh->ext_file   );
     p = volume_readfork(p, &vh->cat_file   );
@@ -381,7 +382,7 @@
     bstoreU32_inc(p, vh->write_count	);
     bstoreU64_inc(p, vh->encodings_bmp	);
     memcpy(p, vh->finder_info, 32); 
-    ((char*) p) += 32; // finderinfo is not used by now
+    p = ((char*) p) + 32; // finderinfo is not used by now
     p = volume_writefork(p, &vh->alloc_file );
     p = volume_writefork(p, &vh->ext_file   );
     p = volume_writefork(p, &vh->cat_file   );
@@ -417,12 +418,12 @@
   
 	UInt16	embeds, embedl;		/* Start/lenght of embedded area in blocks */
 	
-	((char*) p) += 0x12;		/* skip unneeded HFS vol fields */
+	p = ((char*) p) + 0x12;		/* skip unneeded HFS vol fields */
 	drAlBlkSiz = bswabU32_inc(p);	/* offset 0x14 */
-	((char*) p) += 0x4;		/* skip unneeded HFS vol fields */
+	p = ((char*) p) + 0x4;		/* skip unneeded HFS vol fields */
 	drAlBlSt    = bswabU16_inc(p);	/* offset 0x1C */
 	
-	((char*) p) += 0x5E;		/* skip unneeded HFS vol fields */
+	p = ((char*) p) + 0x5E;		/* skip unneeded HFS vol fields */
 	signature = bswabU16_inc(p);	/* offset 0x7C, drEmbedSigWord */
 	if (signature != HFSP_VOLHEAD_SIG)
 	    HFSP_ERROR(-1, "This looks like a normal HFS volume");
@@ -508,8 +509,10 @@
 
     vol->flags |= rw & HFSP_MODE_RDWR;
 
-    if (volume_read_wrapper(vol, &vol->vol))
+    if (volume_read_wrapper(vol, &vol->vol)) {
+	vol->flags ^= HFSP_MODE_RDWR;
 	return -1;
+    }
 
     if (volume_read(vol, &backup, vol->maxblocks - 2))
 	return -1;
diff -Naur hfsplus-1.0.4/src/glob.c hfsplus-1.0.4.oden/src/glob.c
--- hfsplus-1.0.4/src/glob.c	2002-03-05 20:50:29.000000000 +0100
+++ hfsplus-1.0.4.oden/src/glob.c	2007-03-16 18:46:20.000000000 +0100
@@ -48,7 +48,7 @@
 
 	switch (*pat)
 	{
-	    case NULL:	// pattern at end
+	    case 0:	// pattern at end
 		return (!*str); // String at end ?
 
 	    case '*':  // match all
